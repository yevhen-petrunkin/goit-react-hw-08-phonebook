{"version":3,"file":"static/js/823.daf265e2.chunk.js","mappings":"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","sources":["components/Form/FormInput/FormInput.styled.jsx","components/Heading/Heading.styled.jsx","components/Heading/Heading.jsx","../node_modules/nanoid/index.browser.js","components/Form/FormInput/FormInput.jsx","components/Form/Form.jsx","components/SubHeading/SubHeading.styled.jsx","components/SubHeading/SubHeading.jsx","components/Search/Search.styled.jsx","components/Search/Search.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Label = styled.label`\n  padding-bottom: 5px;\n  text-transform: capitalize;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgb(239 239 239);\n  border: 1px solid transparent;\n  border-radius: 5px;\n  box-shadow: inset 1px 1px 5px grey;\n  outline: none;\n\n  &:hover,\n  &:focus {\n    border-color: grey;\n    outline: none;\n  }\n\n  &: focus {\n    background-color: white;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin: 0;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Title } from './Heading.styled';\n\nexport const Heading = ({ title }) => {\n  return <Title>{title}</Title>;\n};\n\nHeading.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import PropTypes from 'prop-types';\n\nimport { Label, Input } from './FormInput.styled';\n\nexport const FormName = ({ value, onChange }) => {\n  return (\n    <Label>\n      Name\n      <Input\n        name=\"name\"\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={onChange}\n        value={value}\n        required\n      />\n    </Label>\n  );\n};\n\nexport const FormNumber = ({ value, onChange }) => {\n  return (\n    <Label>\n      Number\n      <Input\n        name=\"number\"\n        type=\"text\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        onChange={onChange}\n        value={value}\n        required\n      />\n    </Label>\n  );\n};\n\nFormName.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nFormNumber.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport { nanoid } from 'nanoid';\nimport { FormName, FormNumber } from './FormInput';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\n\nconst showAlertMessage = contactName =>\n  alert(`${contactName} is already in contacts.`);\n\nexport const FormBox = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const checkContactsForMatches = formData => {\n    const normalizedName = formData.name.toLowerCase();\n    return contacts.some(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const formData = { name, number };\n    const doesMatch = checkContactsForMatches(formData);\n    if (doesMatch) {\n      showAlertMessage(formData.name);\n      return;\n    }\n    dispatch(addContact({ id: nanoid(6), ...formData }));\n\n    reset();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        mb: 2,\n        p: 2,\n        bgcolor: 'white',\n        display: 'block',\n        borderRadius: '8px',\n        boxShadow: 3,\n      }}\n      autocomplete=\"off\"\n      onSubmit={handleSubmit}\n    >\n      <Box\n        sx={{\n          pb: 2,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '20px',\n        }}\n      >\n        <FormName value={name} onChange={handleInputChange} />\n        <FormNumber value={number} onChange={handleInputChange} />\n      </Box>\n      <Button\n        variant=\"contained\"\n        size=\"medium\"\n        sx={{\n          px: 2,\n          py: 1,\n          textTransform: 'none',\n          color: 'black',\n          bgcolor: 'rgb(239 239 239)',\n          boxShadow: 3,\n          ':hover': {\n            bgcolor: 'white',\n            color: 'black',\n          },\n        }}\n        type=\"submit\"\n      >\n        Add Contact\n      </Button>\n    </Box>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SubTitle = styled.h2`\n  margin: 0;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { SubTitle } from './SubHeading.styled';\n\nexport const SubHeading = ({ subtitle }) => {\n  return <SubTitle>{subtitle}</SubTitle>;\n};\n\nSubHeading.propTypes = {\n  subtitle: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const SearchLabel = styled.label`\n  padding-bottom: 5px;\n`;\n\nexport const SearchInput = styled.input`\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgb(239 239 239);\n  border: 1px solid transparent;\n  border-radius: 5px;\n  box-shadow: inset 1px 1px 5px grey;\n  outline: none;\n\n  &:hover,\n  &:focus {\n    border-color: grey;\n    outline: none;\n  }\n\n  &: focus {\n    background-color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { updateFilter } from 'redux/filterSlice';\nimport { useDispatch } from 'react-redux';\nimport { SearchLabel, SearchInput } from './Search.styled';\n\nexport const Search = ({ searchLabel }) => {\n  const dispatch = useDispatch();\n  return (\n    <SearchLabel>\n      {searchLabel}\n      <SearchInput\n        name=\"search\"\n        type=\"text\"\n        onChange={evt => dispatch(updateFilter(evt.currentTarget.value))}\n      />\n    </SearchLabel>\n  );\n};\n\nSearch.propTypes = {\n  searchLabel: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport Button from '@mui/material/Button';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li style={{ marginBottom: '20px' }}>\n      {contact.name}: {contact.number}{' '}\n      <Button\n        variant=\"contained\"\n        size=\"small\"\n        sx={{\n          my: 'auto',\n          px: 1,\n          textTransform: 'none',\n          color: 'black',\n          bgcolor: 'rgb(239 239 239)',\n          boxShadow: 3,\n          ':hover': {\n            bgcolor: 'white',\n            color: 'black',\n          },\n        }}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </Button>\n    </li>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectVisibleContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { List } from './ContactList.styled';\nimport { Contact } from './Contact';\n\nexport const ContactList = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <p>Wait, please. We are loading contacts.</p>}\n\n      {error && <p>{error}</p>}\n\n      {!isLoading && visibleContacts.length === 0 && (\n        <p>Oops... No contacts found.</p>\n      )}\n\n      {!isLoading && visibleContacts.length !== 0 ? (\n        <List>\n          {visibleContacts.map(contact => {\n            return <Contact key={contact.name} contact={contact} />;\n          })}\n        </List>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n","import Box from '@mui/material/Box';\nimport { Heading } from 'components/Heading';\nimport { FormBox } from 'components/Form';\nimport { SubHeading } from 'components/SubHeading';\nimport { Search } from 'components/Search';\nimport { ContactList } from 'components/ContactList';\n\nconst Contacts = () => {\n  return (\n    <>\n      <section>\n        <Heading title=\"Phonebook\" />\n        <FormBox />\n      </section>\n      <Box\n        component=\"section\"\n        sx={{\n          pl: 2,\n          bgcolor: 'white',\n          borderRadius: '8px',\n          boxShadow: 3,\n        }}\n      >\n        <SubHeading subtitle=\"Contacts\" />\n        <Search searchLabel=\"Find contacts by name\" />\n        <Box\n          sx={{\n            pb: 2,\n            minHeight: '20em',\n            bgcolor: 'white',\n            display: 'block',\n            borderRadius: '8px',\n          }}\n        >\n          <ContactList />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Label","styled","Input","Title","Heading","title","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormName","value","onChange","I","name","type","pattern","required","FormNumber","FormBox","dispatch","useDispatch","contacts","useSelector","selectContacts","useState","setName","number","setNumber","handleInputChange","evt","currentTarget","Box","component","sx","mb","p","bgcolor","display","borderRadius","boxShadow","autocomplete","onSubmit","preventDefault","formData","doesMatch","normalizedName","toLowerCase","some","contact","checkContactsForMatches","alert","addContact","pb","alignItems","gap","Button","variant","px","py","textTransform","color","SubTitle","SubHeading","subtitle","SearchLabel","SearchInput","Search","searchLabel","updateFilter","List","Contact","style","marginBottom","my","onClick","deleteContact","ContactList","isLoading","selectIsLoading","error","selectError","visibleContacts","selectVisibleContacts","useEffect","fetchContacts","length","map","pl","minHeight"],"sourceRoot":""}