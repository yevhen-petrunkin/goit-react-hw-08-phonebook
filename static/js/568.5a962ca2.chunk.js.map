{"version":3,"file":"static/js/568.5a962ca2.chunk.js","mappings":"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","sources":["components/Form/Form.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nconst showAlertMessage = contactName =>\n  alert(`${contactName} is already in contacts.`);\n\nexport const FormBox = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const checkContactsForMatches = formData => {\n    const normalizedName = formData.name.toLowerCase();\n    return contacts.some(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const formData = { name, number };\n    const doesMatch = checkContactsForMatches(formData);\n    if (doesMatch) {\n      showAlertMessage(formData.name);\n      return;\n    }\n    dispatch(addContact(formData));\n    reset();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        mb: 2,\n        p: 2,\n        bgcolor: 'white',\n        display: 'block',\n        borderRadius: '8px',\n        boxShadow: 3,\n      }}\n      autoComplete=\"off\"\n      onSubmit={handleSubmit}\n    >\n      <Box\n        sx={{\n          pb: 2,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '20px',\n        }}\n      >\n        <TextField\n          name=\"name\"\n          label=\"Name\"\n          type=\"text\"\n          size=\"small\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleInputChange}\n          value={name}\n          required\n          sx={{\n            bgcolor: 'rgb(239 239 239)',\n          }}\n        />\n        <TextField\n          name=\"number\"\n          label=\"Number\"\n          type=\"tel\"\n          size=\"small\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={handleInputChange}\n          value={number}\n          required\n          sx={{\n            bgcolor: 'rgb(239 239 239)',\n          }}\n        />\n      </Box>\n      <Button\n        variant=\"contained\"\n        size=\"medium\"\n        sx={{\n          px: 2,\n          py: 1,\n          textTransform: 'none',\n          color: 'black',\n          bgcolor: 'rgb(239 239 239)',\n          boxShadow: 3,\n          ':hover': {\n            bgcolor: 'white',\n            color: 'black',\n          },\n        }}\n        type=\"submit\"\n      >\n        Add Contact\n      </Button>\n    </Box>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li style={{ marginBottom: '20px' }}>\n      <Typography variant=\"body2\" component=\"span\">\n        {contact.name}: {contact.number}{' '}\n      </Typography>\n      <Button\n        variant=\"contained\"\n        size=\"small\"\n        sx={{\n          ml: 2,\n          my: 'auto',\n          px: 1,\n          textTransform: 'none',\n          color: 'black',\n          bgcolor: 'rgb(239 239 239)',\n          boxShadow: 3,\n          ':hover': {\n            bgcolor: 'white',\n            color: 'black',\n          },\n        }}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </Button>\n    </li>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectVisibleContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { List } from './ContactList.styled';\nimport { Contact } from './Contact';\n\nexport const ContactList = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <p>Wait, please. We are loading contacts.</p>}\n\n      {error && <p>{error}</p>}\n\n      {!isLoading && visibleContacts.length === 0 && (\n        <p>Oops... No contacts found.</p>\n      )}\n\n      {!isLoading && visibleContacts.length !== 0 ? (\n        <List>\n          {visibleContacts.map(contact => {\n            return <Contact key={contact.name} contact={contact} />;\n          })}\n        </List>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\nimport { FormBox } from 'components/Form';\nimport { ContactList } from 'components/ContactList';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <section>\n        <Typography variant=\"h4\" component=\"h1\" sx={{ mb: 2 }}>\n          Phonebook\n        </Typography>\n        <FormBox />\n      </section>\n      <section>\n        <Box\n          sx={{\n            p: 2,\n            bgcolor: 'white',\n            borderRadius: '8px',\n            boxShadow: 3,\n          }}\n        >\n          <Typography variant=\"h5\" component=\"h2\" sx={{ mb: 2 }}>\n            Contacts\n          </Typography>\n          <TextField\n            name=\"search\"\n            label=\"Search Name\"\n            type=\"text\"\n            size=\"small\"\n            onChange={evt => dispatch(updateFilter(evt.currentTarget.value))}\n            sx={{\n              mb: 3,\n              bgcolor: 'rgb(239 239 239)',\n            }}\n          />\n          <Box\n            sx={{\n              minHeight: '20em',\n              bgcolor: 'white',\n              display: 'block',\n              borderRadius: '8px',\n            }}\n          >\n            <ContactList />\n          </Box>\n        </Box>\n      </section>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormBox","dispatch","useDispatch","contacts","useSelector","selectContacts","useState","name","setName","number","setNumber","handleInputChange","evt","currentTarget","value","Box","component","sx","mb","p","bgcolor","display","borderRadius","boxShadow","autoComplete","onSubmit","preventDefault","formData","doesMatch","normalizedName","toLowerCase","some","contact","checkContactsForMatches","alert","addContact","pb","alignItems","gap","TextField","label","type","size","pattern","title","onChange","required","Button","variant","px","py","textTransform","color","List","styled","Contact","style","marginBottom","Typography","ml","my","onClick","deleteContact","id","ContactList","isLoading","selectIsLoading","error","selectError","visibleContacts","selectVisibleContacts","useEffect","fetchContacts","length","map","updateFilter","minHeight"],"sourceRoot":""}