{"version":3,"file":"static/js/406.6af98797.chunk.js","mappings":"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","sources":["components/Box.jsx","components/Form/Form.styled.jsx","components/Form/FormInput/FormInput.styled.jsx","components/Heading/Heading.styled.jsx","components/Heading/Heading.jsx","components/SubmitButton/SubmitButton.styled.jsx","components/SubmitButton/SubmitButton.jsx","../node_modules/nanoid/index.browser.js","components/Form/FormInput/FormInput.jsx","components/Form/Form.jsx","components/SubHeading/SubHeading.styled.jsx","components/SubHeading/SubHeading.jsx","components/Search/Search.styled.jsx","components/Search/Search.jsx","components/ContactList/ContactList.styled.jsx","components/DeleteButton/DeleteButton.styled.jsx","components/DeleteButton/DeleteButton.jsx","components/ContactList/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  typography,\n  layout,\n  flexbox,\n  border,\n  shadow,\n} from 'styled-system';\n\nexport const Box = styled.div`\n   {\n    box-sizing: border-box;\n  }\n  ${color}\n  ${space}\n  ${typography}\n  ${layout}\n  ${flexbox}\n  ${border}\n  ${shadow}\n`;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-bottom: 20px;\n  padding: 20px;\n  background-color: white;\n  display: block;\n  border-radius: 8px;\n  box-shadow: 1px 1px 6px black;\n`;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  padding-bottom: 5px;\n  text-transform: capitalize;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgb(239 239 239);\n  border: 1px solid transparent;\n  border-radius: 5px;\n  box-shadow: inset 1px 1px 5px grey;\n  outline: none;\n\n  &:hover,\n  &:focus {\n    border-color: grey;\n    outline: none;\n  }\n\n  &: focus {\n    background-color: white;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin: 0;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Title } from './Heading.styled';\n\nexport const Heading = ({ title }) => {\n  return <Title>{title}</Title>;\n};\n\nHeading.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  display: block;\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: rgb(239 239 239);\n  border: 1px solid transparent;\n  border-radius: 5px;\n  box-shadow: 1px 1px 5px grey;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    border-color: grey;\n    box-shadow: 1px 1px 2px grey;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { Btn } from './SubmitButton.styled';\n\nexport const SubmitButton = ({ text, type }) => {\n  return <Btn type={type}>{text}</Btn>;\n};\n\nSubmitButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import PropTypes from 'prop-types';\n\nimport { Label, Input } from './FormInput.styled';\n\nexport const FormName = ({ value, onChange }) => {\n  return (\n    <Label>\n      Name\n      <Input\n        name=\"name\"\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={onChange}\n        value={value}\n        required\n      />\n    </Label>\n  );\n};\n\nexport const FormNumber = ({ value, onChange }) => {\n  return (\n    <Label>\n      Number\n      <Input\n        name=\"number\"\n        type=\"text\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        onChange={onChange}\n        value={value}\n        required\n      />\n    </Label>\n  );\n};\n\nFormName.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nFormNumber.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport { nanoid } from 'nanoid';\nimport { Box } from '../Box';\nimport { Form } from './Form.styled';\nimport { FormName, FormNumber } from './FormInput';\nimport { SubmitButton } from '../SubmitButton';\n\nconst showAlertMessage = contactName =>\n  alert(`${contactName} is already in contacts.`);\n\nexport const FormBox = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const checkContactsForMatches = formData => {\n    const normalizedName = formData.name.toLowerCase();\n    return contacts.some(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const formData = { name, number };\n    const doesMatch = checkContactsForMatches(formData);\n    if (doesMatch) {\n      showAlertMessage(formData.name);\n      return;\n    }\n    dispatch(addContact({ id: nanoid(6), ...formData }));\n\n    reset();\n  };\n\n  return (\n    <Form autocomplete=\"off\" onSubmit={handleSubmit}>\n      <Box pb=\"20px\" display=\"flex\" alignItems=\"center\" style={{ gap: '20px' }}>\n        <FormName value={name} onChange={handleInputChange} />\n        <FormNumber value={number} onChange={handleInputChange} />\n      </Box>\n      <SubmitButton type=\"submit\" text=\"Add Contact\" />\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SubTitle = styled.h2`\n  margin: 0;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { SubTitle } from './SubHeading.styled';\n\nexport const SubHeading = ({ subtitle }) => {\n  return <SubTitle>{subtitle}</SubTitle>;\n};\n\nSubHeading.propTypes = {\n  subtitle: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const SearchLabel = styled.label`\n  padding-bottom: 5px;\n`;\n\nexport const SearchInput = styled.input`\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgb(239 239 239);\n  border: 1px solid transparent;\n  border-radius: 5px;\n  box-shadow: inset 1px 1px 5px grey;\n  outline: none;\n\n  &:hover,\n  &:focus {\n    border-color: grey;\n    outline: none;\n  }\n\n  &: focus {\n    background-color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { updateFilter } from 'redux/filterSlice';\nimport { useDispatch } from 'react-redux';\nimport { SearchLabel, SearchInput } from './Search.styled';\n\nexport const Search = ({ searchLabel }) => {\n  const dispatch = useDispatch();\n  return (\n    <SearchLabel>\n      {searchLabel}\n      <SearchInput\n        name=\"search\"\n        type=\"text\"\n        onChange={evt => dispatch(updateFilter(evt.currentTarget.value))}\n      />\n    </SearchLabel>\n  );\n};\n\nSearch.propTypes = {\n  searchLabel: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n`;\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  display: inline-block;\n  padding: 5px 10px;\n  font-size: 12px;\n  background-color: rgb(239 239 239);\n  border: 1px solid transparent;\n  border-radius: 5px;\n  box-shadow: 1px 1px 5px grey;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    border-color: grey;\n    box-shadow: 1px 1px 2px grey;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { Btn } from './DeleteButton.styled';\n\nexport const DeleteButton = ({ text, type, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Btn type={type} onClick={() => dispatch(deleteContact(id))}>\n      {text}\n    </Btn>\n  );\n};\n\nDeleteButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { DeleteButton } from '../../DeleteButton';\n\nexport const Contact = ({ contact }) => (\n  <li style={{ marginBottom: '20px' }}>\n    {contact.name}: {contact.number}{' '}\n    <DeleteButton type=\"button\" text=\"Delete\" id={contact.id} />\n  </li>\n);\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectVisibleContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { List } from './ContactList.styled';\nimport { Contact } from './Contact';\n\nexport const ContactList = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <p>Wait, please. We are loading contacts.</p>}\n\n      {error && <p>{error}</p>}\n\n      {!isLoading && visibleContacts.length === 0 && (\n        <p>Oops... No contacts found.</p>\n      )}\n\n      {!isLoading && visibleContacts.length !== 0 ? (\n        <List>\n          {visibleContacts.map(contact => {\n            return <Contact key={contact.name} contact={contact} />;\n          })}\n        </List>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n","import { Box } from 'components/Box';\nimport { Heading } from 'components/Heading';\nimport { FormBox } from 'components/Form';\nimport { SubHeading } from 'components/SubHeading';\nimport { Search } from 'components/Search';\nimport { ContactList } from 'components/ContactList';\n\nconst Contacts = () => {\n  return (\n    <>\n      <section>\n        <Heading title=\"Phonebook\" />\n        <FormBox />\n      </section>\n      <Box\n        pl=\"20px\"\n        bg=\"white\"\n        borderRadius=\"8px\"\n        boxShadow=\"1px 1px 6px black\"\n        as=\"section\"\n      >\n        <SubHeading subtitle=\"Contacts\" />\n        <Search searchLabel=\"Find contacts by name\" />\n        <Box pb=\"20px\" minHeight=\"20em\" bg=\"white\" borderRadius=\"8px\">\n          <ContactList />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Box","styled","color","space","typography","layout","flexbox","border","shadow","Form","Label","Input","Title","Heading","title","Btn","SubmitButton","text","type","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormName","value","onChange","I","name","pattern","required","FormNumber","FormBox","dispatch","useDispatch","contacts","useSelector","selectContacts","useState","setName","number","setNumber","handleInputChange","evt","currentTarget","autocomplete","onSubmit","preventDefault","formData","doesMatch","normalizedName","toLowerCase","some","contact","checkContactsForMatches","alert","addContact","pb","display","alignItems","style","gap","SubTitle","SubHeading","subtitle","SearchLabel","SearchInput","Search","searchLabel","updateFilter","List","DeleteButton","onClick","deleteContact","Contact","marginBottom","ContactList","isLoading","selectIsLoading","error","selectError","visibleContacts","selectVisibleContacts","useEffect","fetchContacts","length","map","pl","bg","borderRadius","boxShadow","as","minHeight"],"sourceRoot":""}